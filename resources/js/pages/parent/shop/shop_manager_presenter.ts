import { AsyncActionRunner } from '@/hex/async_action_runner';
import { ObservableValue } from '@/hex/observable_value';
import axios from 'axios';
import { ShopItem } from './types'; // Import the ShopItem type

export class ShopManagerPresenter {
  shopItemsRunner: AsyncActionRunner<ShopItem[]>;
  selectedShopItem: ObservableValue<ShopItem | null>;
  // Add runners/state for create/edit/delete later

  constructor() {
    this.shopItemsRunner = new AsyncActionRunner<ShopItem[]>([]);
    this.selectedShopItem = new ObservableValue<ShopItem | null>(null);
  }

  // Method to fetch the list of shop items
  listShopItems() {
    this.shopItemsRunner.execute(async () => {
      try {
        // Use the index route generated by apiResource
        const response = await axios.get<ShopItem[]>(route('shop-items.index'));
        console.log('Fetched Shop Items:', response.data);
        return response.data; // Assuming API returns the array directly
      } catch (error) {
        console.error('Failed to fetch shop items:', error);
        // Optionally show a toast message here
        return []; // Return empty array on error
      }
    });
  }

  // Method to set the selected item for the sidebar
  setSelectedShopItem(item: ShopItem | null) {
    this.selectedShopItem.setValue(item);
  }

  // --- Placeholder methods for future CRUD ---
  startEditItem(id: number) {
    console.log('Start editing item:', id);
    // TODO: Implement edit modal logic
  }

  startDeleteItem(item: ShopItem) {
    console.log('Start deleting item:', item);
    // TODO: Implement delete confirmation logic
  }

  openCreateItemModal() {
    console.log('Open create item modal');
    // TODO: Implement create modal logic
  }
}
